function initThreeJsScene(){var e=new THREE.Scene,t=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.1,500);t.position.set(0,-25,80);var n=new THREE.WebGLRenderer({antialias:!0,alpha:!0});n.setClearColor(8900331,.2),n.setSize(window.innerWidth,window.innerHeight),n.domElement.className="three-js-canvas",document.body.appendChild(n.domElement);var i=new THREE.OrbitControls(t,n.domElement);i.maxDistance=150,i.enableDamping=!0,i.enabled=!1;let a=new THREE.AmbientLight(4210752,.4);e.add(a);let r=new THREE.DirectionalLight(16777215,.8);r.position.set(50,50,50),e.add(r);let o=new THREE.PointLight(8900331,.6,100);o.position.set(0,20,0),e.add(o);let l=[];(new THREE.STLLoader).load("https://cywarr.github.io/small-shop/fish.stl",t=>{for(let n=0;n<4;n++){let i=new THREE.Vector3(35+10*Math.random(),0,0),a=new THREE.Vector3(0,1,0),r=[],o=6,u=2*Math.PI/o;for(let e=0;e<o;e++)r.push((new THREE.Vector3).copy(i).applyAxisAngle(a,u*e+.5*n).setY(THREE.MathUtils.randFloat(-15,15)));let s=new THREE.CatmullRomCurve3(r);s.closed=!0;let p=511,m=s.getSpacedPoints(p),d=s.computeFrenetFrames(p,!0),f=[];m.forEach(e=>{f.push(e.x,e.y,e.z)}),d.binormals.forEach(e=>{f.push(e.x,e.y,e.z)}),d.normals.forEach(e=>{f.push(e.x,e.y,e.z)}),d.tangents.forEach(e=>{f.push(e.x,e.y,e.z)});let E=new Float32Array(f),h=new THREE.DataTexture(E,p+1,4,THREE.RGBFormat,THREE.FloatType);h.magFilter=THREE.NearestFilter;let c=t.clone();c.center(),c.rotateX(.5*-Math.PI);let T=.4+.2*Math.random();c.scale(T,T,T);let w=(new THREE.Box3).setFromBufferAttribute(c.getAttribute("position")),S=new THREE.Vector3;w.getSize(S);let v={uSpatialTexture:{value:h},uTextureSize:{value:new THREE.Vector2(p+1,4)},uTime:{value:0},uLengthRatio:{value:S.z/s.cacheArcLengths[200]},uObjSize:{value:S},uTimeOffset:{value:.8*n}};l.push(v);let x=[16737792,16777215,16711680,16766720],R=new THREE.MeshBasicMaterial({color:x[n%x.length],wireframe:!0});R.onBeforeCompile=e=>{e.uniforms.uSpatialTexture=v.uSpatialTexture,e.uniforms.uTextureSize=v.uTextureSize,e.uniforms.uTime=v.uTime,e.uniforms.uLengthRatio=v.uLengthRatio,e.uniforms.uObjSize=v.uObjSize,e.uniforms.uTimeOffset=v.uTimeOffset,e.vertexShader="\n          uniform sampler2D uSpatialTexture;\n          uniform vec2 uTextureSize;\n          uniform float uTime;\n          uniform float uLengthRatio;\n          uniform vec3 uObjSize;\n          uniform float uTimeOffset;\n\n          struct splineData {\n            vec3 point;\n            vec3 binormal;\n            vec3 normal;\n          };\n\n          splineData getSplineData(float t){\n            float step = 1. / uTextureSize.y;\n            float halfStep = step * 0.5;\n            splineData sd;\n            sd.point    = texture2D(uSpatialTexture, vec2(t, step * 0. + halfStep)).rgb;\n            sd.binormal = texture2D(uSpatialTexture, vec2(t, step * 1. + halfStep)).rgb;\n            sd.normal   = texture2D(uSpatialTexture, vec2(t, step * 2. + halfStep)).rgb;\n            return sd;\n          }\n        "+e.vertexShader,e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","#include <begin_vertex>\n\n          vec3 pos = position;\n\n          float wStep = 1. / uTextureSize.x;\n          float hWStep = wStep * 0.5;\n\n          float d = pos.z / uObjSize.z;\n          float t = fract(((uTime + uTimeOffset) * 0.08) + (d * uLengthRatio));\n          float numPrev = floor(t / wStep);\n          float numNext = numPrev + 1.;\n          float tPrev = numPrev * wStep + hWStep;\n          float tNext = numNext * wStep + hWStep;\n          splineData splinePrev = getSplineData(tPrev);\n          splineData splineNext = getSplineData(tNext);\n\n          float f = (t - tPrev) / wStep;\n          vec3 P = mix(splinePrev.point, splineNext.point, f);\n          vec3 B = mix(splinePrev.binormal, splineNext.binormal, f);\n          vec3 N = mix(splinePrev.normal, splineNext.normal, f);\n\n          transformed = P + (N * pos.x) + (B * pos.y);\n          ")};let g=new THREE.Mesh(c,R);e.add(g)}});var u=new THREE.Clock;n.setAnimationLoop(()=>{i.enabled&&i.update();let a=u.getElapsedTime();l.forEach(e=>{e.uTime.value=a}),n.render(e,t)}),window.addEventListener("resize",()=>{t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),n.setSize(window.innerWidth,window.innerHeight)})}document.addEventListener("DOMContentLoaded",()=>{"undefined"!=typeof THREE?initThreeJsScene():console.error("Three.js not loaded")});